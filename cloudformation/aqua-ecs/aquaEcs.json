{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "Install Aqua Console and Gateway on ECS.",
  "Parameters": {
    "dbAllocatedStorage": {
      "Default": "40",
      "Description": "The size of the database (Gb)",
      "Type": "Number",
      "MinValue": "40",
      "MaxValue": "1024",
      "ConstraintDescription": "must be between 40 and 1024Gb."
    },
    "dbPassword": {
      "NoEcho": "true",
      "Description": "The database admin account password",
      "Type": "String",
      "MinLength": "8",
      "MaxLength": "41"
    },
    "dbUser": {
      "Description": "The database admin account username",
      "Type": "String",
      "MinLength": "1",
      "MaxLength": "16",
      "AllowedPattern": "^[a-zA-Z0-9]*$",
      "ConstraintDescription": "must begin with a letter and contain only alphanumeric characters."
    },
    "multiAzDatabase": {
      "Default": "false",
      "Description": "Create a multi-AZ RDS database instance",
      "Type": "String",
      "AllowedValues": [
        "true",
        "false"
      ],
      "ConstraintDescription": "must be either true or false."
    },
    "myDbInstanceClass": {
      "Default": "db.m3.medium",
      "Description": "The database instance type",
      "Type": "String",
      "ConstraintDescription": "must select a valid database instance type."
    },
    "myDbName": {
      "Default": "aqua",
      "Description": "The database name",
      "Type": "String",
      "MinLength": "1",
      "MaxLength": "64",
      "AllowedPattern": "[a-zA-Z][a-zA-Z0-9]*",
      "ConstraintDescription": "must begin with a letter and contain only alphanumeric characters."
    },
    "cluster": {
      "Type": "String",
      "Description": "Enter cluster name",
      "Default": "test"
    },
    "vpcId": {
      "Type": "String<AWS::EC2::VPC::Id>",
      "Description": "VpcId of your existing Virtual Private Cloud(VPC)"
    },
    "vpcSubnet": {
      "Type": "String",
      "Description": "Enter VPC subnet example: 10.0.0.0/16"
    },
    "subnets": {
      "Type": "List<AWS::EC2::Subnet::Id>",
      "Description": "Enter subnets."
    },
    "aquasecServerImage": {
      "Type": "String",
      "Description": "Enter image path on ECR."
    },
    "aquasecGatewayImage": {
      "Type": "String",
      "Description": "Enter image path on ECR."
    }
  },
  "Resources": {
    "aquaAlbSecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupDescription": "Allow access to aqua console and gateway.",
        "VpcId": {
          "Ref": "vpcId"
        },
        "SecurityGroupIngress": [
          {
            "IpProtocol": "tcp",
            "FromPort": "8080",
            "ToPort": "8080",
            "CidrIp": "0.0.0.0/0"
          },
          {
            "IpProtocol": "tcp",
            "FromPort": "3622",
            "ToPort": "3622",
            "CidrIp": {
              "Ref": "vpcSubnet"
            }
          }
        ]
      }
    },
    "aquaGatewayElb": {
      "DependsOn": [
        "aquaAlbSecurityGroup"
      ],
      "Type": "AWS::ElasticLoadBalancing::LoadBalancer",
      "Properties": {
        "CrossZone": true,
        "HealthCheck": {
          "HealthyThreshold": 2,
          "Interval": 30,
          "Target": "TCP:3622",
          "Timeout": 5,
          "UnhealthyThreshold": 5
        },
        "LoadBalancerName": "aquaGateway",
        "Listeners": [
          {
            "InstancePort": 3622,
            "InstanceProtocol": "TCP",
            "LoadBalancerPort": "3622",
            "Protocol": "TCP"
          }
        ],
        "Scheme": "internal",
        "SecurityGroups": [
          {
            "Ref": "aquaAlbSecurityGroup"
          }
        ],
        "Subnets": {
          "Ref": "subnets"
        }
      }
    },
    "SecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupDescription": "Allow access to aqua RDS Postgres DB.",
        "VpcId": {
          "Ref": "vpcId"
        },
        "SecurityGroupIngress": [
          {
            "IpProtocol": "tcp",
            "FromPort": "5432",
            "ToPort": "5432",
            "CidrIp": {
              "Ref": "vpcSubnet"
            }
          }
        ]
      }
    },
    "MyDBSubnetGroup": {
      "Type": "AWS::RDS::DBSubnetGroup",
      "Properties": {
        "DBSubnetGroupDescription": "subnets available for the RDS DB Instance",
        "SubnetIds": {
          "Ref": "subnets"
        }
      }
    },
    "MyDB": {
      "DependsOn": [
        "SecurityGroup",
        "MyDBSubnetGroup"
      ],
      "Type": "AWS::RDS::DBInstance",
      "Properties": {
        "AllocatedStorage": {
          "Ref": "dbAllocatedStorage"
        },
        "AutoMinorVersionUpgrade": "false",
        "VPCSecurityGroups": [
          {
            "Ref": "SecurityGroup"
          }
        ],
        "DBName": {
          "Ref": "myDbName"
        },
        "BackupRetentionPeriod": "7",
        "DBInstanceIdentifier": {
          "Ref": "myDbName"
        },
        "DBInstanceClass": {
          "Ref": "myDbInstanceClass"
        },
        "DBSubnetGroupName": {
          "Ref": "MyDBSubnetGroup"
        },
        "Engine": "postgres",
        "EngineVersion": "9.6.6",
        "MasterUsername": {
          "Ref": "dbUser"
        },
        "MasterUserPassword": {
          "Ref": "dbPassword"
        },
        "MultiAZ": {
          "Ref": "multiAzDatabase"
        },
        "StorageType": "gp2"
      }
    },
    "aquaGatewaytaskdefinition": {
      "DependsOn": [
        "MyDB"
      ],
      "Type": "AWS::ECS::TaskDefinition",
      "Properties": {
        "Family": "aquaGateway",
        "NetworkMode": "bridge",
        "ContainerDefinitions": [
          {
            "Name": "aquaGateway",
            "Image": {
              "Ref": "aquasecGatewayImage"
            },
            "PortMappings": [
              {
                "ContainerPort": "3622",
                "HostPort": "3622"
              }
            ],
            "Memory": "1024",
            "Essential": "true",
            "Environment": [
              {
                "Name": "SCALOCK_DBUSER",
                "Value": {
                  "Ref": "dbUser"
                }
              },
              {
                "Name": "SCALOCK_DBPASSWORD",
                "Value": {
                  "Ref": "dbPassword"
                }
              },
              {
                "Name": "SCALOCK_DBNAME",
                "Value": "scalock"
              },
              {
                "Name": "SCALOCK_GATEWAY_NAME",
                "Value": "scalockElb"
              },
              {
                "Name": "SCALOCK_GATEWAY_PUBLIC_IP",
                "Value": {
                  "Fn::GetAtt": [
                    "aquaGatewayElb",
                    "DNSName"
                  ]
                }
              },
              {
                "Name": "SCALOCK_DBHOST",
                "Value": {
                  "Fn::GetAtt": [
                    "MyDB",
                    "Endpoint.Address"
                  ]
                }
              },
              {
                "Name": "SCALOCK_AUDIT_DBUSER",
                "Value": {
                  "Ref": "dbUser"
                }
              },
              {
                "Name": "SCALOCK_AUDIT_DBPASSWORD",
                "Value": {
                  "Ref": "dbPassword"
                }
              },
              {
                "Name": "SCALOCK_AUDIT_DBNAME",
                "Value": "slk_audit"
              },
              {
                "Name": "SCALOCK_AUDIT_DBHOST",
                "Value": {
                  "Fn::GetAtt": [
                    "MyDB",
                    "Endpoint.Address"
                  ]
                }
              }
            ]
          }
        ]
      }
    },
    "aquaGatewayService": {
      "DependsOn": [
        "aquaGatewaytaskdefinition"
      ],
      "Type": "AWS::ECS::Service",
      "Properties": {
        "Cluster": {
          "Ref": "cluster"
        },
        "ServiceName": "aquaGateway",
        "DesiredCount": "2",
        "PlacementStrategies": [
          {
            "Type": "spread",
            "Field": "attribute:ecs.availability-zone"
          },
          {
            "Type": "spread",
            "Field": "instanceId"
          }
        ],
        "DeploymentConfiguration": {
          "MaximumPercent": "200",
          "MinimumHealthyPercent": "100"
        },
        "LoadBalancers": [
          {
            "ContainerName": "aquaGateway",
            "ContainerPort": "3622",
            "LoadBalancerName": {
              "Ref": "aquaGatewayElb"
            }
          }
        ],
        "TaskDefinition": {
          "Ref": "aquaGatewaytaskdefinition"
        }
      }
    },
    "aquaAlb": {
      "DependsOn": [
        "aquaAlbSecurityGroup"
      ],
      "Type": "AWS::ElasticLoadBalancingV2::LoadBalancer",
      "Properties": {
        "Name": "aqua",
        "Scheme": "internet-facing",
        "SecurityGroups": [
          {
            "Ref": "aquaAlbSecurityGroup"
          }
        ],
        "Subnets": {
          "Ref": "subnets"
        },
        "Type": "application"
      }
    },
    "aquaConsoleService": {
      "DependsOn": [
        "aquaConsoleTaskdefinition"
      ],
      "Type": "AWS::ECS::Service",
      "Properties": {
        "Cluster": {
          "Ref": "cluster"
        },
        "ServiceName": "aquaConsole",
        "DesiredCount": "2",
        "PlacementStrategies": [
          {
            "Type": "spread",
            "Field": "attribute:ecs.availability-zone"
          },
          {
            "Type": "spread",
            "Field": "instanceId"
          }
        ],
        "DeploymentConfiguration": {
          "MaximumPercent": "200",
          "MinimumHealthyPercent": "100"
        },
        "LoadBalancers": [
          {
            "ContainerName": "aquaConsole",
            "ContainerPort": "8080",
            "TargetGroupArn": {
              "Ref": "aquaServerTargetGroup"
            }
          }
        ],
        "TaskDefinition": {
          "Ref": "aquaConsoleTaskdefinition"
        }
      }
    },
    "aquaConsoleTaskdefinition": {
      "DependsOn": [
        "MyDB"
      ],
      "Type": "AWS::ECS::TaskDefinition",
      "Properties": {
        "Family": "aquaConsole",
        "Volumes": [
          {
            "Host": {
              "SourcePath": "/var/run/docker.sock"
            },
            "Name": "docker-socket"
          }
        ],
        "NetworkMode": "bridge",
        "ContainerDefinitions": [
          {
            "Name": "aquaConsole",
            "Image": {
              "Ref": "aquasecServerImage"
            },
            "MountPoints": [
              {
                "ContainerPath": "/var/run/docker.sock",
                "SourceVolume": "docker-socket"
              }
            ],
            "PortMappings": [
              {
                "ContainerPort": "8080",
                "HostPort": "8080"
              }
            ],
            "Memory": "1024",
            "Essential": "true",
            "Environment": [
              {
                "Name": "SCALOCK_SSH_IP_PORT",
                "Value": {
                  "Fn::GetAtt": [
                    "aquaGatewayElb",
                    "DNSName"
                  ]
                }
              },
              {
                "Name": "SCALOCK_DBUSER",
                "Value": {
                  "Ref": "dbUser"
                }
              },
              {
                "Name": "SCALOCK_DBPASSWORD",
                "Value": {
                  "Ref": "dbPassword"
                }
              },
              {
                "Name": "SCALOCK_DBNAME",
                "Value": "scalock"
              },
              {
                "Name": "CLUSTER_MODE",
                "Value": "enabled"
              },
              {
                "Name": "SCALOCK_GATEWAY_NAME",
                "Value": "scalockElb"
              },
              {
                "Name": "SCALOCK_DBHOST",
                "Value": {
                  "Fn::GetAtt": [
                    "MyDB",
                    "Endpoint.Address"
                  ]
                }
              },
              {
                "Name": "SCALOCK_AUDIT_DBUSER",
                "Value": {
                  "Ref": "dbUser"
                }
              },
              {
                "Name": "SCALOCK_AUDIT_DBPASSWORD",
                "Value": {
                  "Ref": "dbPassword"
                }
              },
              {
                "Name": "SCALOCK_AUDIT_DBNAME",
                "Value": "slk_audit"
              },
              {
                "Name": "SCALOCK_AUDIT_DBHOST",
                "Value": {
                  "Fn::GetAtt": [
                    "MyDB",
                    "Endpoint.Address"
                  ]
                }
              }
            ]
          }
        ]
      }
    },
    "aquaServerListener": {
      "DependsOn": [
        "aquaAlb",
        "aquaServerTargetGroup"
      ],
      "Type": "AWS::ElasticLoadBalancingV2::Listener",
      "Properties": {
        "DefaultActions": [
          {
            "Type": "forward",
            "TargetGroupArn": {
              "Ref": "aquaServerTargetGroup"
            }
          }
        ],
        "LoadBalancerArn": {
          "Ref": "aquaAlb"
        },
        "Port": "8080",
        "Protocol": "HTTP"
      }
    },
    "aquaServerTargetGroup": {
      "Type": "AWS::ElasticLoadBalancingV2::TargetGroup",
      "Properties": {
        "TargetType": "instance",
        "HealthCheckIntervalSeconds": 6,
        "HealthCheckProtocol": "HTTP",
        "HealthCheckTimeoutSeconds": 5,
        "HealthyThresholdCount": 2,
        "Matcher": {
          "HttpCode": "200"
        },
        "Name": "aquaServer",
        "Port": "8080",
        "Protocol": "HTTP",
        "TargetGroupAttributes": [
          {
            "Key": "deregistration_delay.timeout_seconds",
            "Value": "60"
          }
        ],
        "UnhealthyThresholdCount": 3,
        "VpcId": {
          "Ref": "vpcId"
        }
      }
    }
  },
  "Outputs": {
    "aquaConsole": {
      "Description": "Aqua ELB DNS.",
      "Value": {
        "Fn::GetAtt": [
          "aquaAlb",
          "DNSName"
        ]
      }
    },
    "aquaConsolePort": {
      "Description": "Aqua console port.",
      "Value": "8080"
    },
    "aquaGatewayPort": {
      "Description": "Aqua console port.",
      "Value": "3622"
    }
  }
}
